{"version":3,"sources":["module.js","main.js","controllers/location-picker-autocomplete.js","controllers/location-picker-widget.js","directives/location-picker-autocomplete.js","directives/focus-from.js"],"names":["ng","window","angular","module","controller","$scope","$timeout","locationPickerService","this","placeholder","minLength","noDataMessage","types","value","bufferInputMs","valueChange","newValue","$emit","vm","data","getLocationsByQuery","url","then","result","catch","$on","sendReply","directive","$parse","restrict","link","scope","element","attrs","$watch","focusFrom","focus","$parent","replace","templateUrl","controllerAs","ctrl","service","$http","API","dataSource","search","uri","indexOf","get","run","$templateCache","put"],"mappings":"CAAA,SAAAA,GACA,aAKAC,OAAAC,QAFAC,OAAA,sCAAA,IAJA,GCAA,SAAAH,GACA,aAKAC,OAAAC,QAFAC,OAAA,sCAAA,IAJA,GCAA,SAAAH,GACA,aAUAC,OAAAC,QARAC,OAAA,uCAAAC,WACA,2EACA,CACA,SACA,SAAAC,OAPA,GCAA,SAAAL,GACA,aAoCAC,OAAAC,QAlCAC,OAAA,uCAAAC,WACA,qEACA,CACA,SACA,WACA,4DACA,SAAAC,EAAAC,EAAAC,GACAC,KAAAC,YAAAJ,EAAAI,aAAA,GACAD,KAAAE,UAAAL,EAAAK,WAAA,EACAF,KAAAG,cAAAN,EAAAM,eAAA,0BACAH,KAAAI,MAAAP,EAAAO,OAAA,oBACAJ,KAAAK,MAAAR,EAAAQ,OAAA,KACAL,KAAAM,cAAAT,EAAAS,eAAA,IAEAN,KAAAO,YAAA,SAAAC,GACAX,EAAAY,MAAA,cAAA,CAAAJ,MAAAG,KAGA,IAAAE,EAAAV,KACAU,EAAAC,KAAA,GAEAZ,EACAa,oBAAAf,EAAAgB,IAAA,KAAAH,EAAAN,OACAU,KACA,SAAAC,GACAL,EAAAC,KAAAI,IAEAC,QAGAnB,EAAAoB,IAAA,oCAAAP,EAAAQ,cAjCA,GAuCA,SAAA1B,GACA,aAqBAC,OAAAC,QAjBAC,OAAA,uCACAwB,UAAA,YAAA,CAAA,WAAA,SAAA,SAAArB,EAAAsB,GACA,MAAA,CACAC,SAAA,IACAC,KAAA,SAAAC,EAAAC,EAAAC,GACAF,EAAAG,OAAAD,EAAAE,UAAA,SAAAtB,GACAA,IACAP,EAAA,WACA0B,EAAA,GAAAI,UAEAL,EAAAM,QAAAJ,EAAAE,YAAA,UAfA,GAwBA,SAAAnC,GACA,aChCAC,OAAAC,QDmCAC,OAAA,uCACAwB,UAAA,gCAAA,CACA,WACA,SEtEArB,GAGA,MAAA,CACAuB,SAAA,IACAS,SAAA,EACAC,YAAA,mFACAnC,WAAA,2EACAoC,aAAA,eACAT,MAAA,CACAZ,KAAA,SFqDA,GC7BA,SAAAnB,GACA,aA+BAC,OAAAC,QA5BAC,OAAA,uCACAwB,UAAA,0BAAA,CACA,WAEA,MAAA,CACAE,SAAA,KACAS,SAAA,EACAC,YAAA,6EACAnC,WAAA,qEACAoC,aAAA,iBACAT,MAAA,CACAV,IAAA,IACAZ,YAAA,KACAC,UAAA,KACAC,cAAA,KACAC,MAAA,KACAC,MAAA,KACAC,cAAA,KACAC,YAAA,MAEAe,KAAA,SAAAC,EAAAC,EAAAC,EAAAQ,SAxBA,GA+CA,SAAAzC,GACA,aAyBAC,OAAAC,QAtBAC,OAAA,uCACAuC,QAAA,4DAAA,CACA,QACA,SAAAC,GAEA,IAAAC,EAAA,GAYA,OAFAA,EAAAxB,oBARA,SAAAyB,EAAAC,EAAAlC,GACA,IAAAmC,EAAAF,GACAA,EAAAG,QAAA,KAAA,EAAA,IAAA,KACA,UAAAF,GACAlC,EAAA,UAAAA,EAAA,IACA,OAAA+B,EAAAM,IAAAF,IAKAH,KArBA,GA4BA1C,QAAAC,OAAA,uCAAA+C,IAAA,CAAA,iBAAA,SAAAC,GAAAA,EAAAC,IAAA,mFAAA,8CACAD,EAAAC,IAAA,6EAAA","file":"akit.component.location-picker-widget.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.locationPickerWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.locationPickerWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.locationPickerWidget\").controller(\n        \"akit.component.locationPickerWidget.locationPickerAutocompleteController\",\n        [\n            \"$scope\",\n            function ($scope) {\n            }\n        ]\n    );\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.locationPickerWidget\").controller(\n        \"akit.component.locationPickerWidget.locationPickerWidgetController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            \"akit.component.locationPickerWidget.locationPickerService\",\n            function ($scope, $timeout, locationPickerService) {\n                /** what to show in the input field when blank */\n                this.placeholder = $scope.placeholder || \"\";\n                /** minimum number of characters typed before search is triggered */\n                this.minLength = $scope.minLength || 2;\n                /** message to show when there are no hits */\n                this.noDataMessage = $scope.noDataMessage || \"Geen resultaat gevonden\";\n                /** the type of values to search for, comma-separated list of \"street\", \"number\" or \"poi\" */\n                this.types = $scope.types || \"street,number,poi\";\n                /** the value that is displayed */\n                this.value = $scope.value || null;\n                /** how long to buffer keystrokes before requesting search results */\n                this.bufferInputMs = $scope.bufferInputMs || 500;\n\n                /** the event fired when the value changes */\n                this.valueChange = function (newValue) {\n                    $scope.$emit(\"valueChange\", { value: newValue });\n                };\n\n                var vm = this;\n                vm.data = [];\n\n                // Send new data\n                locationPickerService\n                    .getLocationsByQuery($scope.url, 'Me', vm.types)\n                    .then(\n                        function (result) {\n                            vm.data = result;\n                            // if (result.data) {\n                            //     result.data.forEach(function (item, index, res) {\n                            //         vm.loadingIndex = index;\n                            //         vm.isLoading = true;\n                            //         $timeout(function () {\n                            //             if (index === 0) {\n                            //                 item.avatar = vm.avatar;\n                            //             }\n                            //             vm.addToChat(item);\n                            //             if (index === res.length - 1) {\n                            //                 vm.loadingIndex = null;\n                            //                 vm.isLoading = false;\n                            //             }\n                            //         }, index * vm.delay);\n                            //     });\n                            // } else {\n                            //     throw new Error(\"no data returned from service\");\n                            // }\n                        }\n                    ).catch(\n                        // function (error) {\n                        //     vm.pushError(error);\n                        //     vm.isLoading = false;\n                        // }\n                    );\n\n                // listen to click events of child <aui-location-picker-message> directives\n                $scope.$on(\"locationPickerMessageReplyClicked\", vm.sendReply);\n            }\n        ]\n    );\n// @ts-ignore\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.locationPickerWidget')\n        .directive('auiLocationPickerAutocomplete', [\n            '$timeout',\n            // 'eventsService',\n            // 'HelperService',\n            // '_',\n            function (\n                $timeout\n                // eventsService,\n                // HelperService,\n                // _\n            ) {\n\n                return {\n                    restrict: 'E',\n                    replace: true,\n                    templateUrl: '/assets/location-picker-widget/views/directives/location-picker-autocomplete.htm',\n                    controller: 'akit.component.locationPickerWidget.locationPickerAutocompleteController',\n                    controllerAs: 'autocomplete',\n                    scope: {\n                        data: '='\n                    }\n                };\n\n\n                // return {\n                //     restrict: 'A',\n                //     scope: {\n                //         autofocus: '=?',\n                //         id: '@',\n                //         ngModel: '=',\n                //         ngOptions: '=',\n                //         disabled: '=?',\n                //         ngChange: '=?',\n                //         ngPicked: '=?',\n                //         lazyload: '=?',\n                //         delay: '@?',\n                //         placeholder: '@?',\n                //         label: '@?',\n                //         noResults: '@?'\n                //     },\n                //     templateUrl: '/assets/location-picker-widget/views/directives/location-picker-autocomplete.htm',\n                //     replace: true,\n                //     link: function (scope, element, attr) {\n\n                //         // --- Directive Variables. ------------------------------------- //\n\n                //         var lazyWatcher, timer;\n\n\n                //         // --- Directive Functions. ------------------------------------- //\n\n                //         function initialize() {\n                //             if (scope.ngModel === undefined) {\n                //                 if (scope.lazyload) {\n                //                     lazyWatcher = scope.$watch('ngModel', function onNgModelChange(newValue, oldValue) {\n                //                         if (newValue !== oldValue && newValue !== undefined) {\n                //                             initialize();\n                //                         }\n                //                     });\n                //                 }\n\n                //                 return;\n                //             } else {\n                //                 if (lazyWatcher !== undefined) {\n                //                     lazyWatcher();\n                //                 }\n                //             }\n\n                //             if (scope.ngOptions === undefined) {\n                //                 console.error('The autocomplete directive requires an options model ([%s]).', scope.choices); //eslint-disable-line no-console\n                //                 return;\n                //             }\n\n                //             setDefaults();\n\n                //             if (scope.autofocus) {\n                //                 $timeout(function () {\n                //                     $('#' + scope.id).focus();\n                //                 }, 0);\n                //             }\n                //         }\n\n                //         function setDefaults() {\n                //             scope.disabled = scope.disabled !== undefined ? scope.disabled : false;\n                //             scope.delay = scope.delay || 0;\n                //             scope.noResults = scope.noResults || \"Geen resultaten gevonden.\";\n                //         }\n\n                //         function findStringInOptions(string) {\n                //             var results = [];\n                //             var str = HelperService.string.flatten(string);\n\n                //             _.each(scope.ngOptions, function (option) {\n                //                 var value = option.value.toLowerCase();\n                //                 if (value.indexOf(str) > -1) {\n                //                     results.push(option);\n                //                 }\n                //             });\n\n                //             return results;\n                //         }\n\n\n                //         // --- Scope Variables. ----------------------------------------- //\n\n                //         scope.search = {\n                //             term: \"\",\n                //             results: [],\n                //             layout: {\n                //                 fieldClass: \"span-full tablet--span-full desktop--span-full\"\n                //             }\n                //         };\n\n                //         scope.state = {\n                //             searching: false,\n                //             hiliteIndex: -1\n                //         };\n\n\n                //         // --- Scope Functions. ----------------------------------------- //\n\n                //         scope.onFocus = function onFocus() {\n                //             scope.search.results = scope.choices;\n                //         };\n\n                //         scope.searchString = function searchString() {\n                //             if (timer !== undefined) {\n                //                 $timeout.cancel(timer);\n                //             }\n\n                //             if (scope.ngChange) {\n                //                 scope.ngChange(scope.search.term);\n                //             }\n\n                //             timer = $timeout(function () {\n                //                 scope.search.results.length = 0;\n\n                //                 if (scope.search.term.length > 0) {\n                //                     scope.search.results = findStringInOptions(scope.search.term);\n                //                 }\n                //             }, scope.delay);\n                //         };\n\n                //         scope.pickChoice = function pickChoice(choice) {\n                //             if (choice) {\n                //                 scope.ngModel = choice.key;\n                //                 scope.displayValue = choice.value;\n                //             } else {\n                //                 scope.ngModel = \"\";\n                //                 scope.displayValue = \"\";\n                //             }\n\n                //             if (scope.ngPicked) {\n                //                 scope.ngPicked(choice);\n                //             }\n                //         };\n\n                //         scope.clearChoice = function clearChoice() {\n                //             var choice = _.find(scope.ngOptions, { key: scope.ngModel });\n                //             scope.search.term = choice.value;\n                //             scope.ngModel = \"\";\n                //             scope.searchString(scope.search.term);\n                //             $timeout(function () {\n                //                 $('#' + scope.id).focus();\n                //             }, 0);\n                //         };\n\n                //         scope.keydown = function keydown(event) {\n                //             switch (event.which) {\n                //                 case 13: // ENTER\n                //                     var choice = scope.search.results[scope.state.hiliteIndex];\n                //                     scope.pickChoice(choice);\n                //                     event.preventDefault();\n                //                     break;\n                //                 case 38: // ARROW UP\n                //                     if (scope.state.hiliteIndex > 0) {\n                //                         scope.state.hiliteIndex -= 1;\n                //                     } else {\n                //                         scope.state.hiliteIndex = scope.search.results.length - 1;\n                //                     }\n                //                     scrollToSelectedItem(scope.state.hiliteIndex);\n                //                     break;\n                //                 case 40: // ARROW DOWN\n                //                     if (scope.state.hiliteIndex < (scope.search.results.length - 1)) {\n                //                         scope.state.hiliteIndex += 1;\n                //                     } else {\n                //                         scope.state.hiliteIndex = 0;\n                //                     }\n                //                     scrollToSelectedItem(scope.state.hiliteIndex);\n                //                     break;\n                //                 case 27: // ESCAPE\n                //                     scope.search.results.length = 0;\n                //                     scope.search.term = \"\";\n                //                     break;\n                //             }\n                //         };\n\n                //         function scrollToSelectedItem(hiliteIndex) {\n                //             var item = document.getElementById('result-' + hiliteIndex);\n                //             var itemHeight = item.offsetHeight;\n                //             var itemTop = item.offsetTop;\n\n                //             var elem = document.getElementById('results');\n                //             var elemHeight = elem.offsetHeight;\n\n                //             if ((itemHeight + itemTop) > elemHeight) {\n                //                 elem.scrollTop = (itemHeight + itemTop) - elemHeight;\n                //             }\n\n                //             if (itemTop < elem.scrollTop) {\n                //                 elem.scrollTop = 0;\n                //             }\n                //         }\n\n                //         // --- Bind to Scope Events. ------------------------------------ //\n\n                //         scope.$watch('ngOptions', function onChoicesChange(newValue, oldValue) {\n                //             var diff = _.compareArraysOfObjects(newValue, oldValue, \"key\");\n\n                //             if (diff.length > 0) {\n                //                 if (newValue.length > 0) {\n                //                     scope.disabled = false;\n                //                     if (scope.search.term.length > 0) {\n                //                         scope.searchString(scope.search.term);\n                //                     }\n                //                 } else {\n                //                     scope.disabled = true;\n                //                 }\n                //             }\n                //         });\n\n                //         eventsService.subscribe('autocomplete.clear', function clearAutocomplete() {\n                //             scope.search.term = \"\";\n                //             scope.search.results.length = 0;\n                //         });\n\n\n                //         // --- Initialize. ---------------------------------------------- //\n\n                //         initialize();\n                //     }\n                // };\n\n\n                // return {\n                //     restrict: 'E',\n                //     replace: true,\n                //     templateUrl: '/assets/location-picker-widget/views/directives/location-picker-autocomplete.htm',\n                //     controller: 'akit.component.locationPickerWidget.locationPickerAutocompleteController',\n                //     controllerAs: 'autocomplete',\n                //     scope: {\n                //         data: '='\n                //     }\n                // };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/14837021/20980\r\n    // <input focusFrom=\"focusMyInput\"> will be focused\r\n    // when this.focusMyInput is set to true in the controller\r\n    // and will then set this.focusMyInput to false\r\n\r\n    ng\r\n        .module('akit.component.locationPickerWidget')\r\n        .directive('focusFrom', ['$timeout', '$parse', function ($timeout, $parse) {\r\n            return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                    scope.$watch(attrs.focusFrom, function (value) {\r\n                        if (value) {\r\n                            $timeout(function () {\r\n                                element[0].focus();\r\n                            });\r\n                            scope.$parent[attrs.focusFrom] = false;\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n\r\n})(window.angular);\r\n"],"sourceRoot":"dist/js"}